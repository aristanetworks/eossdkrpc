# Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

#-----------------------------------------------------------------------
# globals

include( 'version.qbi' )
include( '//Qube/protobuf.qbi' )

include_dirs = [
   '-I$target_dir',
   '-I$src_dir',
   '-I$target_dir/src-includes',
   '-I$target_dir/generated-includes',
   '-I$INCLUDEDIR',
]

compiler_based_cflags = []
define( 'AR_TOOLCHAIN', 'default')
if defined_value( 'AR_TOOLCHAIN' ) != 'clang':
      compiler_based_cflags += [
         '-Wformat-signedness',
      ]

cfg = config(
   export_package='EosSdkRpcProtos',
   cflags=[
      '-DHAVE_CONFIG_H',
   ],
   cflags_cc=[
      '-Wextra',
      '-Wall',
      '-Werror',
      '-Wconversion',
      '-Wno-unused-parameter',
   ] + compiler_based_cflags,
   ldflags=[
      '-Wl,--no-undefined',
      '-Wl,--copy-dt-needed-entries',
   ],
   test_env=[
      'SRCDIR=/src/EosSdkRpcProtos',
   ],
   taccflags=[
      '+d',
      '--Werror=7',
   ],
   tacc_include_dirs=include_dirs,
   py_versions=[ '2', '3' ],
)

#-----------------------------------------------------------------------
# extra dist files

extra_dist(
   'EosSdkRpcProtos.spec',
)

#-----------------------------------------------------------------------
# Protobufs

# files listed under grpcFiles shall generate both gRPC and protobuf files
grpcFiles = [
   'proto/acl.proto',
   'proto/agent.proto',
   'proto/bgp_path.proto',
   'proto/eapi.proto',
   'proto/EosSdkRpc.proto',
   'proto/eth_lag_intf.proto',
   'proto/intf.proto',
   'proto/ip_intf.proto',
   'proto/ip_route.proto',
   'proto/macsec.proto',
   'proto/mpls_route.proto',
   'proto/nexthop_group.proto',
   'proto/policy_map.proto',
]

# files listed under protobufFiles shall generate only protobuf files.
protobufFiles = [
   'proto/acl_types.proto',
   'proto/bgp_path_types.proto',
   'proto/eapi_types.proto',
   'proto/eth_lag_intf_types.proto',
   'proto/intf_types.proto',
   'proto/ip_types.proto',
   'proto/ip_intf_types.proto',
   'proto/ip_route_types.proto',
   'proto/macsec_types.proto',
   'proto/mpls_types.proto',
   'proto/mpls_route_types.proto',
   'proto/nexthop_group_types.proto',
   'proto/policy_map_types.proto',
   'proto/rpc_types.proto',
]


# the next variables list proto files in the upcoming_proto directory
# these are meant to be the unimplemented features.
upcomingGrpcFiles = [
   'upcoming_proto/bgp.proto',
   'upcoming_proto/eth_phy_intf.proto',
]

upcomingProtobufFiles = [
   'upcoming_proto/bgp_types.proto',
   'upcoming_proto/eth_phy_intf_types.proto',
]

#-----------------------------------------------------------------------
# data target

data(
   'EosSdkRpcProtoFiles',
   sources=grpcFiles + protobufFiles,
   inst_dir='$DATADIR/EosSdkRpc/proto',
)

protoc_out = '$target_dir/proto'
protocPyGenerated = proto_grpc_py(
   'grpc_py',
   sources=grpcFiles,
   proto_path='$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocPyGenerated += proto_py(
   'proto_py',
   sources=protobufFiles,
   proto_path='$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocPyGenerated += proto_grpc_py(
   'upcoming_grpc_py',
   sources=upcomingGrpcFiles,
   proto_path='$src_dir/upcoming_proto:$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocPyGenerated += proto_py(
   'upcoming_proto_py',
   sources=upcomingProtobufFiles,
   proto_path='$src_dir/upcoming_proto:$src_dir/proto',
   protoc_out=protoc_out
).outputs

#-----------------------------------------------------------------------
# Python sources

py_library(
   'PyLib',
   sources=protocPyGenerated,
)

#-----------------------------------------------------------------------
# python breadth tests

py_test( 'StaleProtoLockTest.py' )


protocCppGenerated = proto_grpc_cpp(
   'grpc_cpp',
   sources=grpcFiles,
   proto_path='$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocCppGenerated += proto_cpp(
   'proto_cpp',
   sources=protobufFiles,
   proto_path='$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocCppGenerated += proto_grpc_cpp(
   'upcoming_grpc_cpp',
   sources=upcomingGrpcFiles,
   proto_path='$src_dir/upcoming_proto:$src_dir/proto',
   protoc_out=protoc_out
).outputs

protocCppGenerated += proto_cpp(
   'upcoming_proto_cpp',
   sources=upcomingProtobufFiles,
   proto_path='$src_dir/upcoming_proto:$src_dir/proto',
   protoc_out=protoc_out
).outputs

data(
   'protoHeaderInstall',
   sources=[ f for f in protocCppGenerated if f.endswith( '.h' ) ],
   inst_dir='$INCLUDEDIR/EosSdkRpcProtos',
)

#-----------------------------------------------------------------------
# Protobuf Libraries

shared_library(
   'EosSdkRpcProtos',
   sources=list( protocCppGenerated ),
   libs=[
      '-lgrpc++',
      '-lgrpc',
      '-lprotobuf',
   ],
   cflags=[ '-Wno-unused-parameter' ]
)

override(
   pattern="${target_dir}/*.pb.cc",
   cflags_cc=cfg.cflags_cc + [ '-Wno-conversion' ]
)

#-----------------------------------------------------------------------
# Protolock
# If any proto files are updated, the proto.lock file must be updated
# protolock commit -lockdir /src/EosSdkRpc/proto -protoroot /src/EosSdkRpc/proto
# May need to a4 edit /src/EosSdkRpc/proto/proto.lock before running the command.

protolockConflictCheckScript="""
protolock status -lockdir /src/EosSdkRpcProtos/proto -protoroot /src/EosSdkRpcProtos/proto
"""

action(
   'protolockConflictCheck',
   description="Protolock backwards compability check",
   script=protolockConflictCheckScript,
   outputs=[
      '{target_dir}/__always_run' # Fake target to ensure this step runs every make
   ],
)
