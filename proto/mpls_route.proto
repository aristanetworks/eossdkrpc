// Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

package eos.remote;

import "mpls_route_types.proto";
import "rpc_types.proto";

service MplsRouteMgrService {

   /**
   * Subscription to monitor changes to MPLS routes in hardware. This request stays
   * active until the client cancels or the server shuts down.
   *
   * EosSdk reference: eos::mpls_route_handler (class)
   */
   rpc watch( MplsRouteWatchRequest ) returns (stream MplsRouteWatchResponse ) {}

   /**
   * Initiate a MPLS resync proccess. Starts a blank configuration to be applied once
   * resync_complete is called.
   *
   * EosSdk reference: eos::mpls_route_mgr::resync_init
   */
   rpc resync_init( MplsRouteResyncInitRequest ) returns (
      MplsRouteResyncInitResponse ) {}

   /**
   * Ends the current MPLS resync process. Deletes the current configuration and
   * applies all changes since resync_init was called.
   *
   * EosSdk reference: eos::mpls_route_mgr::resync_complete
   */
   rpc resync_complete( MplsRouteResyncCompleteRequest ) returns (
      MplsRouteResyncCompleteResponse ) {}

   /**
   * Returns a list of all configured MPLS routes.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_iter
   */
   rpc mpls_routes( MplsRoutesRequest ) returns ( stream MplsRoutesResponse ) {}

   /**
   * Returns a list of all MPLS routes in hardware.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_status_iter_t
   */
   rpc mpls_route_statuses( MplsRouteStatusesRequest ) returns (
      stream MplsRouteStatusesResponse ) {}

   /**
   * Returns a list of configured MPLS vias for a specified route.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_iter_t
   */
   rpc mpls_route_vias( MplsRouteViasRequest ) returns (
      stream MplsRouteViasResponse ) {}

   /**
   * Returns a list of MPLS vias in hardware for a specified MPLS route or FEC.
   *
   * The vias returned for a MPLS FEC are unbound meaning they do not have a
   * route key.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_status_iter_t
   */
   rpc mpls_route_via_statuses( MplsRouteViaStatusesRequest ) returns (
      stream MplsRouteViaStatusesResponse ) {}

   /**
   * Queries whether the specified route or via exists in the switch config.
   *
   * EosSdk reference: eos::mpls_route_mgr::exists
   */
   rpc exists( MplsRouteExistsRequest ) returns ( MplsRouteExistsResponse ) {}

   /**
   * Inserts or updates an MPLS static route in the switch config.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_set
   */
   rpc mpls_route_set( MplsRouteSetRequest ) returns ( MplsRouteSetResponse ) {}

   /**
   * Inserts or updates multiple MPLS static routes in the switch config in a single
   * call.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_set
   */
   rpc bulk_mpls_route_set( BulkMplsRouteSetRequest ) returns (
      BulkMplsRouteSetResponse ) {}

   /**
   * Removes the MPLS route and all vias matching its route key.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_del
   */
   rpc mpls_route_del( MplsRouteDelRequest ) returns ( MplsRouteDelResponse ) {}

   /**
   * Removes multiple MPLS routes and all vias matching their route keys in a single
   * call.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_del
   */
   rpc bulk_mpls_route_del( BulkMplsRouteDelRequest ) returns (
      BulkMplsRouteDelResponse ) {}

   /**
   * Add the specified via to its associated MPLS route.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_set
   */
   rpc mpls_route_via_set( MplsRouteViaSetRequest ) returns (
      MplsRouteViaSetResponse ) {}

   /**
   * Adds multiple vias to their associated MPLS routes in a single call.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_set
   */
   rpc bulk_mpls_route_via_set( BulkMplsRouteViaSetRequest ) returns (
      BulkMplsRouteViaSetResponse ) {}

   /**
   * Removes the specified via from its associated MPLS route. If all vias are
   * removed from a route it will still exist but it will have no nexthop
   * information.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_del
   */
   rpc mpls_route_via_del( MplsRouteViaDelRequest ) returns (
      MplsRouteViaDelResponse ) {}

   /**
   * Removes multiple vias from their associated MPLS routes in a single call.
   * If all vias are removed from a route it will still exist but it will have
   * no nexthop information.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_via_del
   */
   rpc bulk_mpls_route_via_del( BulkMplsRouteViaDelRequest ) returns (
      BulkMplsRouteViaDelResponse ) {}

   /**
   * Returns the FEC ID corresponding to the specified MPLS route key if the route is
   * programmed in hardware. If it is not programmed in hardware then the FEC ID will
   * be 0 denoting that it is not set.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_fec_id
   */
   rpc fec_id( MplsRouteFecIdRequest ) returns ( MplsRouteFecIdResponse ) {}

   /**
   * Returns the active metric that is being used in hardware to forward traffic for
   * the specified MPLS route key, or 0 if the route key does not have any active
   * vias programmed.
   *
   * EosSdk reference: eos::mpls_route_mgr::mpls_route_metric
   */
   rpc metric( MplsRouteMetricRequest ) returns (
      MplsRouteMetricResponse ) {}

}

enum MplsRouteWatchedField {
   MPLS_ROUTE_ALL_FIELDS = 0;
   MPLS_ROUTE = 1;
   MPLS_ROUTE_VIAS = 2;
}

message MplsRouteFieldsControl {
  repeated MplsRouteWatchedField fields = 1;
}

message MplsRouteWatchRequest {
   // Set to true if an immediate acknowledgement is desired.
   bool ack = 1;
   oneof overload {
      // True if all MPLS routes should be watched.
      bool all = 2;
      // The route key of a particular MPLS route to watch.
      MplsRouteKey route_key = 3;
   }
   MplsRouteFieldsControl dump_fields = 4;
}

/**
* Notification for when an MPLS route is to be programmed into hardware or when it is
* assigned a new FEC ID.
*/
message OnMplsRouteSet {
   // The route key of the MPLS route that triggered the event.
   MplsRouteKey route_key = 1;
   // The ID of the MPLS route's associated FEC.
   MplsFecId fec_id = 2;
}

/**
* Notification for when an MPLS route is deleted from hardware.
*/
message OnMplsRouteDel {
   // The route key of the MPLS route that triggered the event.
   MplsRouteKey route_key = 1;
}

/**
* Notification for when an MPLS FEC is created or updated in hardware.
*/
message OnMplsFecSet {
   // The ID of the FEC which triggered the event.
   MplsFecId fec_id = 1;
}

/**
* Notification for when an MPLS FEC is removed from hardware.
*/
message OnMplsFecDel {
   // The ID of the FEC which triggered the event.
   MplsFecId fec_id = 1;
}

message OnMplsRouteDump {
  MplsRoute route = 1;
  repeated MplsRouteVia vias = 2;
}

message MplsRouteWatchResponse {
   // If true the agent is now actively watching for events.
   bool ack = 1;
   oneof route_event {
      // The specified MPLS route has been programmed to hardware or
      // assigned a new FEC ID.
      OnMplsRouteSet on_mpls_route_set = 2;
      // The specified MPLS route has been deleted from hardware.
      OnMplsRouteDel on_mpls_route_del = 3;
   }
   oneof fec_event {
      // The specified MPLS FEC has been created or updated in hardware.
      OnMplsFecSet on_mpls_fec_set = 4;
      // The specified MPLS FEC has been removed from hardware.
      OnMplsFecDel on_mpls_fec_del = 5;
   }
   OnMplsRouteDump on_mpls_route_dump = 6;
}

message MplsRouteResyncInitRequest {}

message MplsRouteResyncInitResponse {}

message MplsRouteResyncCompleteRequest{}

message MplsRouteResyncCompleteResponse {}

message MplsRoutesRequest {
   // If true, the stream response will also include vias for every
   // reported MPLS route key.
   bool report_vias = 1;
}

message MplsRoutesResponse {
   // The configured MPLS routes.
   MplsRoute route = 1;
   // VIAs of a configured route.
   repeated MplsRouteVia vias = 2;
}

message MplsRouteStatusesRequest {}

message MplsRouteStatusesResponse {
   // The keys of the MPLS routes in hardware.
   MplsRouteKey route_key = 1;
}

message MplsRouteViasRequest {
   // The key of the route to query.
   MplsRouteKey route_key = 1;
}

message MplsRouteViasResponse {
   // The vias configured for the route.
   MplsRouteVia route_via = 1;
}

message MplsRouteViaStatusesRequest {
   oneof overloads {
      // The key of the route to query.
      MplsRouteKey route_key = 1;
      // The ID of the fec to query.
      MplsFecId fec_id = 2;
   }
}

message MplsRouteViaStatusesResponse {
   // The vias in hardware for the MPLS route key or FEC.
   MplsRouteVia route_via = 1;
}

message MplsRouteExistsRequest {
   oneof overloads {
      // The key of the route to query.
      MplsRouteKey route_key = 1;
      // The route via to query.
      MplsRouteVia route_via = 2;
   }
}

message MplsRouteExistsResponse {
   // True if the route or via exists in the switch config otherwise false.
   bool exists = 1;
}

enum MplsRouteSetViasAction {
   // Use this convenience method to create routes and vias in a single RPC call.
   // While primarily designed for route creation, when utilized with an existing
   // route key, any vias present within the MplsRouteSetRequest message will be
   // appended to the existing set of vias for that route. If adding the vias
   // results in a failure, the route shall be deleted.
   MPLS_ROUTE_SET_VIAS_ADD = 0;
   // Choosing this action with an existing route will replace vias in a
   // make-before-break fashion within the RPC server, when possible.
   // Vias that are common between the old set and the new set should
   // remain untouched. If the operation fails, then the original via set
   // is restored.
   MPLS_ROUTE_SET_VIAS_REPLACE = 1;
}

message MplsRouteSetRequest {
   // The MPLS route to insert or update.
   MplsRoute route = 1;
   // MPLS vias to be added to the route.
   repeated MplsRouteVia vias = 2;
   // action associated with vias, i.e., ADD or REPLACE.
   MplsRouteSetViasAction vias_action = 3;
}

message MplsRouteSetResponse {}

message BulkMplsRouteSetRequest {
   // List of MplsRouteSetRequests.
   repeated MplsRouteSetRequest requests = 1;
}

message BulkMplsRouteSetResponse {
   // Number of consecutive successful requests.
   uint64 processed = 1;
   // Success or error details in the event of failure.
   RpcResponseStatus status = 2;
}

message MplsRouteDelRequest  {
   // The route key of the route to remove.
   MplsRouteKey route_key = 1;
}

message MplsRouteDelResponse {}

message BulkMplsRouteDelRequest {
   // List of MplsRouteDelRequests.
   repeated MplsRouteDelRequest requests = 1;
}

message BulkMplsRouteDelResponse {
   // Number of consecutive successful requests.
   uint64 processed = 1;
   // Success or error details in the event of failure.
   RpcResponseStatus status = 2;
}

message MplsRouteViaSetRequest {
   // The via to add to the route.
   MplsRouteVia route_via = 1;
}

message MplsRouteViaSetResponse {}

message BulkMplsRouteViaSetRequest {
   // List of MplsRouteViaSetRequests.
   repeated MplsRouteViaSetRequest requests = 1;
}

message BulkMplsRouteViaSetResponse {
   // Number of consecutive successful requests.
   uint64 processed = 1;
   // Success or error details in the event of failure.
   RpcResponseStatus status = 2;
}

message MplsRouteViaDelRequest {
   // The via to remove.
   MplsRouteVia route_via = 1;
}

message MplsRouteViaDelResponse {}

message BulkMplsRouteViaDelRequest {
   // List of MplsRouteViaDelRequests.
   repeated MplsRouteViaDelRequest requests = 1;
}

message BulkMplsRouteViaDelResponse {
   // Number of consecutive successful requests.
   uint64 processed = 1;
   // Success or error details in the event of failure.
   RpcResponseStatus status = 2;
}

message MplsRouteFecIdRequest {
   // The route key.
   MplsRouteKey route_key = 1;
}

message MplsRouteFecIdResponse {
   // The FEC ID if the route key is programmed in hardware otherwise 0.
   MplsFecId fec_id = 1;
}

message MplsRouteMetricRequest {
   // The route key to query. Its metric value is not used.
   MplsRouteKey route_key = 1;
}

message MplsRouteMetricResponse {
   // The metric being used in hardware to forward traffic for the specified
   // route key or 0 if it does not have any active vias programmed.
   uint32 metric = 1;
}
