// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

package eos.remote;

import "rpc_types.proto";
import "nexthop_group_types.proto";

service NexthopGroupMgrService {
   /**
    * Subscription to monitor changes on nexthop groups. This request
    * stays active until it is cancelled from client side or the server is shut down.
    * Making this request with all = false and no name has no effect.
    * 
    * Request:
    *    One of these options:
    *       all = true
    *       name = name of a particular nexthop group to watch.
    * Response: Events are streamed as changes happen:
    *    name = interface whose status changed (ignored on confirmation).
    *    One of the following changes:
    *       active_status = there was a change in the active status.
    *       nhg_programmed = NHG has been programmed.
    *       confirmation = Indicates subscription is successful.
    *    
    * EosSdk reference: eos::nexthop_group_handler (class)
    */
   rpc watch( WatchNhgRequest ) returns ( stream WatchNhgResponse ) {}

   /**
    * Initiates a resync process. Starts a blank configuration that will be applied#
    * once resync_complete is called.
    *
    * Request:
    *    empty
    * Response:
    *    none
    *
    * EosSdk reference: eos::nexthop_group_mgr::resync_init
    */
   rpc resync_init( ResyncNhgInitRequest ) returns ( ResyncNhgInitResponse ) {}

   /**
    * Deletes current configuration and applies all changes since resync_init has
    * been called last.
    *
    * Request:
    *    empty
    * Response:
    *    none
    *
    * EosSdk reference: eos::nexthop_group_mgr::resync_complete
    */
   rpc resync_complete( ResyncNhgCompleteRequest ) returns ( ResyncNhgCompleteResponse ) {}

   /**
    * Returns a list of all configured nexthop groups
    *
    * Request:
    *    empty
    * Response:
    *    nhg = configured nexthop group.
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group_iter
    */
   rpc nexthop_groups( NexthopGroupsRequest ) returns ( stream NexthopGroupsResponse ) {}

   /**
    * Returns a list of all programmed nexthop groups.
    *
    * Request:
    *    empty
    * Response:
    *    nhg = programmed nexthop group.
    *
    * EosSdk reference: eos::nexthop_group_mgr::programmed_nexthop_group_iter
    */
   rpc programmed_nexthop_groups( ProgrammedNexthopGroupsRequest ) returns ( stream ProgrammedNexthopGroupsResponse ) {}

   /**
    * Returns the nexthop group specified by name, if exists.
    *
    * Request:
    *    name = name of the nexthop group to search.
    * Response:
    *    nhg = nexthop group (empty if not found).
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group
    */
   rpc nexthop_group( NexthopGroupRequest ) returns ( NexthopGroupResponse ) {}

   /**
    * Returns the counter corresponding to the given nexthop group name and entry.
    *
    * Request:
    *    name = name of the nexthop group to search.
    *    entry = entry number (16-bit).
    * Response:
    *    counter = counter data (empty if not found).
    *
    * EosSdk reference: eos::nexthop_group_mgr::counter
    */
   rpc counter( CounterRequest ) returns ( CounterResponse ) {}

   /**
    * Queries if the nexthop group with given name exists.
    *
    * Request:
    *    name = name of the nexthop_group.
    * Response:
    *    exists = true if the nexthop group exists.
    *
    * EosSdk reference: eos::nexthop_group_mgr::exists
    */
   rpc exists( NhgExistsRequest ) returns ( NhgExistsResponse ) {}

   /**
    * Queries whether a nexthop group is active
    *
    * Request:
    *    name = name of the nexthop group.
    * Response:
    *    active = true if the specified group is active.
    *
    * EosSdk reference: eos::nexthop_group_mgr::active
    */
   rpc active( NhgActiveRequest ) returns ( NhgActiveResponse ) {}

   /**
    * Creates or updates a nexthop group.
    *
    * Request:
    *    nhg = details of the new group
    * Response:
    *    none
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group_set
    */
   rpc nexthop_group_set( NexthopGroupSetRequest ) returns ( NexthopGroupSetResponse ) {}

   /**
    * Creates or updates multiple nexthops groups in a single call.
    *
    * Request:
    *    requests = list of NexthopGroupSetRequest
    * Response:
    *    processed = number of consecutive successful requests.
    *    status = success or error details in case of failure.
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group_set
    */
   rpc bulk_nexthop_group_set( BulkNexthopGroupSetRequest ) returns ( BulkNexthopGroupSetResponse ) {}

   /**
    * Deletes a nexthop group.
    *
    * Request:
    *    name = name of the nexthop group to delete.
    * Response:
    *    none
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group_del
    */
   rpc nexthop_group_del( NexthopGroupDelRequest ) returns ( NexthopGroupDelResponse ) {}

   /**
    * Deletes multiple nexthop groups in a single call.
    *
    * Request:
    *    requests = list of NexthopGroupDelRequest
    * Response:
    *    processed = number of consecutive successful requests.
    *    status = success or error details in case of failure.
    *
    * EosSdk reference: eos::nexthop_group_mgr::nexthop_group_del
    */
   rpc bulk_nexthop_group_del( BulkNexthopGroupDelRequest ) returns ( BulkNexthopGroupDelResponse ) {}

   /**
    * Queries a programmed nexthop group by name.
    *
    * Request:
    *    name = name of the programmed nexthop group.
    * Response:
    *    nhg = details of the nexthop group (empty if not found).
    *
    * EosSdk reference: eos::nexthop_group_mgr::!
    */
   rpc programmed_nexthop_group( ProgrammedNexthopGroupRequest ) returns ( ProgrammedNexthopGroupResponse ) {}
}

message WatchNhgRequest {
   oneof overloads {
      bool all = 1;
      string name = 2;
   }
   bool recv_notifications = 3;
}

message WatchNhgResponse {
   string name = 1;
   oneof events {
      bool active_status = 2;
      bool nhg_programmed = 3;
   }
}

message ResyncNhgInitRequest {}

message ResyncNhgInitResponse {}

message ResyncNhgCompleteRequest {}

message ResyncNhgCompleteResponse {}

message NexthopGroupsRequest {}

message NexthopGroupsResponse {
   NexthopGroup nhg = 1; 
}

message ProgrammedNexthopGroupsRequest {}

message ProgrammedNexthopGroupsResponse {
   string name = 1; 
}

message NexthopGroupRequest {
   string name = 1; 
}

message NexthopGroupResponse {
   NexthopGroup nhg = 1; 
}

message CounterRequest {
   string name = 1;
   uint32 entry = 2;
}

message CounterResponse {
   NexthopGroupCounter counter = 1; 
}

message NhgExistsRequest {
   string name = 1; 
}

message NhgExistsResponse {
   bool exists = 1; 
}

message NhgActiveRequest {
   string name = 1; 
}

message NhgActiveResponse {
   bool active = 1; 
}

message NexthopGroupSetRequest {
   NexthopGroup nhg = 1; 
}

message NexthopGroupSetResponse {}

message BulkNexthopGroupSetRequest {
   repeated NexthopGroupSetRequest requests = 1;
}

message BulkNexthopGroupSetResponse {
   uint64 processed = 1;
   RpcResponseStatus status = 2;
}

message NexthopGroupDelRequest {
   string name = 1; 
}

message NexthopGroupDelResponse {}

message BulkNexthopGroupDelRequest {
   repeated NexthopGroupDelRequest requests = 1;
}

message BulkNexthopGroupDelResponse {
   uint64 processed = 1;
   RpcResponseStatus status = 2;
}

message ProgrammedNexthopGroupRequest {
   string name = 1; 
}

message ProgrammedNexthopGroupResponse {
   NexthopGroup nhg = 1; 
}
