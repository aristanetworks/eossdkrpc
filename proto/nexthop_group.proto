// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

package eos.remote;

import "rpc_types.proto";
import "nexthop_group_types.proto";

service NexthopGroupMgrService {
  rpc watch( WatchNhgRequest ) returns ( stream WatchNhgResponse ) {}
  rpc resync_init( ResyncNhgInitRequest ) returns ( ResyncNhgInitResponse ) {}
  rpc resync_complete( ResyncNhgCompleteRequest ) returns ( ResyncNhgCompleteResponse ) {}
  rpc nexthop_groups( NexthopGroupsRequest ) returns ( stream NexthopGroupsResponse ) {}
  rpc programmed_nexthop_groups( ProgrammedNexthopGroupsRequest ) returns ( stream ProgrammedNexthopGroupsResponse ) {}
  rpc nexthop_group( NexthopGroupRequest ) returns ( NexthopGroupResponse ) {}
  rpc counter( CounterRequest ) returns ( CounterResponse ) {}
  rpc exists( NhgExistsRequest ) returns ( NhgExistsResponse ) {}
  rpc active( NhgActiveRequest ) returns ( NhgActiveResponse ) {}
  rpc nexthop_group_set( NexthopGroupSetRequest ) returns ( NexthopGroupSetResponse ) {}
  rpc bulk_nexthop_group_set( BulkNexthopGroupSetRequest ) returns ( BulkNexthopGroupSetResponse ) {}
  rpc nexthop_group_del( NexthopGroupDelRequest ) returns ( NexthopGroupDelResponse ) {}
  rpc bulk_nexthop_group_del( BulkNexthopGroupDelRequest ) returns ( BulkNexthopGroupDelResponse ) {}
  rpc programmed_nexthop_group( ProgrammedNexthopGroupRequest ) returns ( ProgrammedNexthopGroupResponse ) {}
}

message WatchNhgRequest {
   oneof overloads {
      bool all_intfs = 1;
      string nhg_name = 2;
   }
   bool recv_notifications = 3;
}

message WatchNhgResponse {
   string nhgName = 1;
   oneof events {
      bool active_status = 2;
      bool nhg_programmed = 3;
   }
}

message ResyncNhgInitRequest {}

message ResyncNhgInitResponse {}

message ResyncNhgCompleteRequest {}

message ResyncNhgCompleteResponse {}

message NexthopGroupsRequest {}

message NexthopGroupsResponse {
   NexthopGroup nhg = 1; 
}

message ProgrammedNexthopGroupsRequest {}

message ProgrammedNexthopGroupsResponse {
   NexthopGroup nhg = 1; 
}

message NexthopGroupRequest {
   string name = 1; 
}

message NexthopGroupResponse {
   NexthopGroup nhg = 1; 
}

message CounterRequest {
   string nhg_name = 1;
   uint32 entry = 2;
}

message CounterResponse {
   NexthopGroupCounter counter = 1; 
}

message NhgExistsRequest {
   string name = 1; 
}

message NhgExistsResponse {
   bool exists = 1; 
}

message NhgActiveRequest {
   string name = 1; 
}

message NhgActiveResponse {
   bool active = 1; 
}

message NexthopGroupSetRequest {
   NexthopGroup nhg = 1; 
}

message NexthopGroupSetResponse {}

message BulkNexthopGroupSetRequest {
   repeated NexthopGroupSetRequest requests = 1;
}

message BulkNexthopGroupSetResponse {
   uint64 processed = 1;
   RpcResponseStatus status = 2;
}

message NexthopGroupDelRequest {
   string name = 1; 
}

message NexthopGroupDelResponse {}

message BulkNexthopGroupDelRequest {
   repeated NexthopGroupDelRequest requests = 1;
}

message BulkNexthopGroupDelResponse {
   uint64 processed = 1;
   RpcResponseStatus status = 2;
}

message ProgrammedNexthopGroupRequest {
   string name = 1; 
}

message ProgrammedNexthopGroupResponse {
   NexthopGroup nhg = 1; 
}
