// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

package eos.remote;

import "defs.proto";
import "intf.proto";
import "mpls.proto";

service NexthopGroupMgrService {
   rpc watch( WatchNhgParams ) returns ( stream NhgEvent ) {}

   rpc resync( ResyncMgrParams ) returns ( RpcResponseStatus ) {}

   rpc nexthop_groups( Void ) returns ( stream NexthopGroup ) {}

   rpc programmed_nexthop_groups( Void ) returns ( stream NexthopGroup ) {}

   rpc nexthop_group( String ) returns ( NexthopGroup ) {}

   rpc counter( NexthopGroupCounterParams ) returns ( NexthopGroupCounter ) {}

   rpc exists( String ) returns ( Bool ) {}

   rpc active( String ) returns ( Bool ) {}

   rpc nexthop_group_set( NexthopGroup ) returns ( RpcResponseStatus ) {}
   
   rpc bulk_nexthop_group_set( BulkNexthopGroupSet ) returns ( BulkResponse ) {}

   rpc nexthop_group_del( String ) returns ( RpcResponseStatus ) {}
   
   rpc bulk_nexthop_group_del( BulkNexthopGroupDel ) returns ( BulkResponse ) {}

   rpc programmed_nexthop_group( String ) returns ( NexthopGroup ) {}
}

message WatchNhgParams {
   oneof overloads {
      bool all_intfs = 1;
      string nhg_name = 2;
   }
   bool recv_notifications = 3;
}

message NhgEvent {
   string nhgName = 1;
   oneof events {
      bool active_status = 2;
      bool nhg_programmed = 3;
   }
}

message NexthopGroupEntry {
   NexthopGroupMplsAction mpls_action = 1;
   bytes nexthop_ip = 2;
   IntfId intf_id = 3;
   string child_nexthop_group = 4;
}

message NexthopGroupMplsAction {
   MplsActions action = 1;
   repeated uint32 mpls_labels = 2;
}

enum NexthopGroupEncapTypes {
   NEXTHOP_GROUP_TYPE_NULL = 0;
   NEXTHOP_GROUP_IP_IN_IP = 1;
   NEXTHOP_GROUP_GRE = 2;
   NEXTHOP_GROUP_MPLS = 3;
   NEXTHOP_GROUP_MPLS_OVER_GRE = 4;
   NEXTHOP_GROUP_IP = 5;
}

enum NexthopGroupGreKeyTypes { 
   NEXTHOP_GROUP_GRE_KEY_NULL = 0;
   NEXTHOP_GROUP_GRE_KEY_INGRESS_INTF = 1;
}

message NexthopGroup {
   string name = 1;
   NexthopGroupEncapTypes type = 2;
   NexthopGroupGreKeyTypes gre_key_type = 3;
   uint32 ttl = 4;
   bytes source_ip_addr = 5;
   IntfId source_intf = 6;
   bool autosize = 7;
   map<uint32, NexthopGroupEntry> nexthops = 8;
   map<uint32, bytes> destination_ips = 9;
   bool counters_unshared = 10;
   bool hierarchical_fecs_enabled = 11;
}

message BulkNexthopGroupSet {
   repeated NexthopGroup groups = 1;
}

message BulkNexthopGroupDel {
   repeated string names = 1;
}

message NexthopGroupCounter {
   uint64 packets = 1;
   uint64 bytes = 2;
   bool valid = 3;
}

message NexthopGroupCounterParams {
   string nhg_name = 1;
   uint32 entry = 2;
}
