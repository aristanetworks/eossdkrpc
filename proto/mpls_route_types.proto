// Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

option go_package = "arista/EosSdkRpc";

package eos.remote;

import "acl_types.proto";
import "intf_types.proto";
import "mpls_types.proto";

/**
 * Represents a forward equivalency class (FEC) for an MPLS route. One or more
 * routes point to a FEC. The FEC corresponds to a set of MPLS vias that are
 * programmed into hardware.
 *
 * EosSdk reference: eos::mpls_fec_id_t
 */
message MplsFecId {
   uint64 id = 1;
}

/**
 * An MPLS v4/v6 static route.
 *
 * EosSdk reference: eos::mpls_route_t
 */
message MplsRoute {
   MplsRouteKey key = 1;
   // MPLS route version in range <1-65535>
   optional uint32 version_id = 2;
}

/**
 * An MPLS route key. Used for MPLS RIB configuration.
 *
 * EosSdk reference: eos::mpls_route_key_t
 */
message MplsRouteKey {
   repeated MplsLabel labels = 1;
   // Must be in range 0 to 255.
   uint32 metric = 2;
}

/**
 * Programmed hardware state of the MPLS route's via set
 */
enum ViaSetProgrammedHwState {
   VIA_SET_HW_UNKNOWN = 0;
   VIA_SET_HW_DROP = 1;
   VIA_SET_HW_PARTIALLY_PROGRAMMED = 2;
   VIA_SET_HW_ALL_PROGRAMMED = 3;
}

/**
 * An MPLS route via, defining the action to take for a specified MPLS route.
 *
 * EosSdk reference: eos::mpls_route_via_t
 */
message MplsRouteVia {
   MplsRouteKey route_key = 1;
   bytes hop = 2;
   IntfId intf = 3;
   repeated MplsLabel pushswap_label = 4;
   MplsActions label_action = 5;
   MplsTtlMode ttl_mode = 6;
   MplsPayloadType payload_type = 7;
   bool skip_egress_acl = 8;
   string nexthop_group = 9;
   // Defaults to 1 if not specified
   uint32 weight = 10;
}
